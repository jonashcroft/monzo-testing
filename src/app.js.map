{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/_auth.js","src/js/_config.js","src/js/_connected.js","src/js/_init.js","src/js/app.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import config from './_config.js';\nimport connected from './_connected.js';\n\nconst initConnect = () => {\n\n    let authorise = document.getElementById('authBtn');\n\n    config.authDiv.classList.remove('inactive');\n    config.authDiv.classList.add('active');\n    config.connectedDiv.classList.remove('active');\n    config.connectedDiv.classList.add('inactive');\n\n    authorise.addEventListener('click', () => {\n\n        initAuth();\n\n    }, false);\n\n};\n\nconst initAuth = () => {\n\n    let authUrl = `https://auth.monzo.com/?client_id=${ config.clientId }&redirect_uri=${ config.redirectUrl }&response_type=code&state=${ Math.random().toString(23).substring(4) }`;\n\n    window.location.replace(authUrl);\n\n};\n\nconst getAuthCode = code => {\n\n    let accessCode = new URLSearchParams(document.location.search).get('code');\n\n    if ( accessCode ) {\n        getAccessToken( accessCode );\n    }\n\n\treturn accessCode;\n\n};\n\nconst getAccessToken = accessCode => {\n\n    console.log('get access token function');\n\n    const url = `${config.monzoUrl}/oauth2/token`;\n\n    const formData = new FormData();\n    formData.append('client_id', config.clientId);\n    formData.append('client_secret', config.clientSecret);\n    formData.append('code', accessCode);\n    formData.append('grant_type', 'authorization_code');\n    formData.append('redirect_uri', config.redirectUrl);\n\n    fetch ( url, {\n        method: 'POST',\n        body: formData\n    })\n    // .then( data => data.text() )\n    .then( (data) => data.json() )\n    .then( (authResponse) => {\n        console.log( authResponse );\n\n        sessionStorage.setItem('accessToken', authResponse.access_token);\n        sessionStorage.setItem('refreshToken', authResponse.refresh_token);\n\n        window.history.replaceState(null, null, window.location.pathname);\n\n        connected();\n\n    }).catch( function ( error ) {\n        console.log( 'failed: ', error );\n    });\n\n};\n\nexport { initConnect, initAuth, getAuthCode };\n","const config = {\n    'clientId'     : '** CLIENT ID **',\n    'clientSecret' : '** CLIENT SECRET **',\n\n    'redirectUrl'  : 'http://localhost:3000',\n    'monzoUrl'     : 'https://api.monzo.com',\n\n    'connectedDiv' :  document.getElementById('connected'),\n    'authDiv'      :  document.getElementById('authDiv')\n}\n\nexport default config;","import config from './_config.js';\n\nconst connected = () => {\n\n    config.authDiv.classList.remove('active');\n    config.authDiv.classList.add('inactive');\n    config.connectedDiv.classList.remove('inactive');\n    config.connectedDiv.classList.add('active');\n\n    // console.log(`Our access token is: ${ sessionStorage.getItem('accessToken') }`);\n\n    // Uncomment when you need to verify connection with the API\n    pingMonzo();\n\n    if ( getMonzoAccount('monzoAccountID') ) {\n\n        console.log('we got it');\n\n    }\n    else {\n\n        console.log('no account id - do something here');\n\n    }\n\n};\n\n/*-------------\nQuick helper function to confirm with Monzo's server that we\n(the current user) are authenticated with the API\n--------------*/\nconst pingMonzo = () => {\n\n    const pingEndpoint = `${config.monzoUrl}/ping/whoami`;\n\n    fetch( pingEndpoint, {\n        method: 'GET',\n        headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('accessToken')}`\n        }\n    })\n    .then( (data) => data.json() )\n    .then( (pingResponse) => {\n\n        console.table(pingResponse);\n\n    }).catch( function( error ) {\n\n        console.error(`Failed: ${error}`);\n\n    });\n\n};\n\n/*-------------\nGet the account ID of our preferred Monzo account,\nthis will only get (1) account and excludes prepaid\naccounts. If Monzo let users have multiple accounts\nin the future, this will need to change.\n\nIn fact - I haven't looked into Joint accounts so\nthis might not even work for those.\n--------------*/\nconst getMonzoAccount = ( monzoAccountID ) => {\n\n    const pingEndpoint = `${config.monzoUrl}/accounts?account_type=uk_retail`;\n\n    // let monzoA/ccountID = '';\n\n    fetch( pingEndpoint, {\n        method: 'GET',\n        headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('accessToken')}`\n        },\n    })\n    .then( (data) => data.json() )\n    .then( (accountsResp) => {\n\n        // console.table( accountsResp.accounts );\n\n        monzoAccountID = accountsResp.accounts[0].id;\n\n        sessionStorage.setItem('accountId', monzoAccountID );\n\n\n    }).catch( function( error ) {\n\n        console.error(`Failed: ${error}`);\n\n    });\n\n    return monzoAccountID;\n\n};\n\nexport default connected;","import config from './_config.js';\nimport { initConnect, getAuthCode } from './_auth.js';\nimport connected from './_connected.js';\n\nconst app = () => {\n\n    let accessToken = sessionStorage.getItem('accessToken');\n\n    if ( typeof accessToken !== 'undefined' && accessToken !== null ) {\n\n        // console.log(`access token is set to: ${ sessionStorage.getItem('accessToken') } `);\n\n        connected();\n\n    }\n    else {\n\n        if ( getAuthCode('code') ) {\n\n            // If an auth code exists in the URL, not entirely sure this needs to be here\n\n        } else {\n\n            console.log('we need to connect');\n\n            initConnect();\n\n        }\n\n    }\n\n};\n\nexport default app;","import app from './_init.js';\n\napp();"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}